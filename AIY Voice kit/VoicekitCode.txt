#!/usr/bin/env python3
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A demo of the Google CloudSpeech recognizer, edited for prototyping RAIA."""
import argparse
import locale
import logging
import time
from time import sleep
from aiy.pins import PIN_A
from gpiozero import LED

led =  LED(PIN_A)
from aiy.board import Board, Led
from aiy.cloudspeech import CloudSpeechClient


def get_hints(language_code):
    if language_code.startswith('en_'):
        return ('turn on the light',
                'turn off the light',
                'blink the light',
                'goodbye')
    return None

def locale_language():
    language, _ = locale.getdefaultlocale()

def main():
    logging.basicConfig(level=logging.DEBUG)
    enable_word_confidence=True

    parser = argparse.ArgumentParser(description='Assistant service example.')
    parser.add_argument('--language', default=locale_language())
    args = parser.parse_args()

    logging.info('Initializing for language %s...', args.language)
    hints = get_hints(args.language)
    client = CloudSpeechClient()
    with Board() as board:
       while True:
            if hints:
                logging.info('Say something, e.g. %s.' % ', '.join(hints))
            else:
                logging.info('Say something.')
            text = client.recognize(language_code=args.language,
                                    hint_phrases=hints)
            if text is None:
                logging.info('You said nothing.')
                board.led.state = Led.OFF
                continue

            logging.info('You said: "%s"' % text)
                text = text.lower()
            if 'turn on the light' in text:
                board.led.state = Led.ON
            elif 'turn off the light' in text:
                board.led.state = Led.OFF
            elif 'blink the light' in text:
                board.led.state = Led.BLINK
            elif 'impertinent' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'diadem' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'picturesque' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'reconnoiter' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'preeminent' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'opulence' in text:
                led.on()
                 sleep(0.1)
                 led.off()
            elif 'nebulous' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'ensconced' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'transmutation' in text:
                 led.on()
                 sleep(0.1)
                led.off()
            elif 'mortification' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'myriad' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'amiability' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'querulous' in text:
                led.on()
                 sleep(0.1)
                 led.off()
            elif 'tautological' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'sagacity' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'renunciation' in text:
                 led.on()
                 sleep(0.1)
                led.off()
            elif 'qualitative' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'beatitude' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'ambiguity' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'herculean' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'immateriality' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'abrogated' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'imperceptibility' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'rhododendron' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'etymolocial' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'extemporaneous' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'sardonically' in text:
                led.on()
                 sleep(0.1)
                 led.off()
            elif 'miasma' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'loquacious' in text:
                 led.on()
                 sleep(0.1)
                 led.off()
            elif 'diametrical' in text:
                 led.on()
                 sleep(0.1)
                led.off()
            elif 'goodbye' in text:
                break

if __name__ == '__main__':
    main()





